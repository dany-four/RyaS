#pragma once
//note
    //compile RYCLOCK with -D RYCLOCK_EXPORTS
#ifdef RYCLOCK_EXPORTS
    #define RYCLOCK __declspec(dllexport)
#else
    #define RYCLOCK __declspec(dllimport)
#endif
#define RYCLOCKCALL __cdecl

#include<chrono>
using namespace std::chrono;
class RYClock{
    public:
    RYClock();
    
    // \returns elapsed time in seconds
    float getTime();
    void reset();
    /* 
    \param Seconds When clock should reset
    \returns True if clock was reset
    */
    bool reset(float Seconds);
    void operator ! ();

    void pointA();
    // \returns elapsed time since the last call to pointA 
    float pointB();

    private:
    float old=0;// for measure pointA to pointB 
    steady_clock::time_point start_point;
};